diff --git a/__pycache__/card.cpython-38.pyc b/__pycache__/card.cpython-38.pyc
index 0652a4a..fe17db2 100644
Binary files a/__pycache__/card.cpython-38.pyc and b/__pycache__/card.cpython-38.pyc differ
diff --git a/__pycache__/cgamecard.cpython-38.pyc b/__pycache__/cgamecard.cpython-38.pyc
index da93db6..eca3be9 100644
Binary files a/__pycache__/cgamecard.cpython-38.pyc and b/__pycache__/cgamecard.cpython-38.pyc differ
diff --git a/__pycache__/clandmarks.cpython-38.pyc b/__pycache__/clandmarks.cpython-38.pyc
index 56e84a6..4c32d19 100644
Binary files a/__pycache__/clandmarks.cpython-38.pyc and b/__pycache__/clandmarks.cpython-38.pyc differ
diff --git a/__pycache__/cwheat.cpython-38.pyc b/__pycache__/cwheat.cpython-38.pyc
index 276cbd5..f2c17b9 100644
Binary files a/__pycache__/cwheat.cpython-38.pyc and b/__pycache__/cwheat.cpython-38.pyc differ
diff --git a/__pycache__/debugprint.cpython-38.pyc b/__pycache__/debugprint.cpython-38.pyc
index 1cc3856..fc602ae 100644
Binary files a/__pycache__/debugprint.cpython-38.pyc and b/__pycache__/debugprint.cpython-38.pyc differ
diff --git a/__pycache__/eventprint.cpython-38.pyc b/__pycache__/eventprint.cpython-38.pyc
index a3dd7ef..98eec1f 100644
Binary files a/__pycache__/eventprint.cpython-38.pyc and b/__pycache__/eventprint.cpython-38.pyc differ
diff --git a/__pycache__/player.cpython-38.pyc b/__pycache__/player.cpython-38.pyc
index 31058bf..fc87c62 100644
Binary files a/__pycache__/player.cpython-38.pyc and b/__pycache__/player.cpython-38.pyc differ
diff --git a/card.py b/card.py
index e76a701..90ecf9b 100644
--- a/card.py
+++ b/card.py
@@ -4,14 +4,13 @@ from debugprint import *
 #attractions = 2
 #just card = 0
 
-#CARD_TYPE_ID = 0
-
+CARD_TYPE_ID = 0
 
 #card class
 #base class of all game cards
 class Card:
 	#self, card name, card description, card execution type, execution dice roll, is card from advanced set
-	def __init__(self, l_sname, l_sdesc, l_itype, l_bHarborExpansion, l_iMaxAmount, l_iPrice, l_sShortDesc):
+	def __init__(self, l_sname, l_sdesc, l_itype, l_bHarborExpansion, l_iMaxAmount, l_iPrice, l_sShortDesc, l_iID):
 		printd("Creating Card() ->  %s" % (l_sname))
 		self.m_sName = l_sname
 		self.m_sDesc = l_sdesc
@@ -21,6 +20,7 @@ class Card:
 		self.m_iMaxAmount = l_iMaxAmount
 		self.m_iPrice = l_iPrice
 		self.m_sShortDesc = l_sShortDesc
+		self.m_iID = l_iID
 		
 	def __str__(self):
 		return ("Card Title: %s\nDescription: %s\nFrom Harbor Expansion: %r" % (self.m_sName, self.m_sDesc, self.m_bHarborExpansion))
diff --git a/cgamecard.py b/cgamecard.py
index 7052b1d..74cde63 100644
--- a/cgamecard.py
+++ b/cgamecard.py
@@ -19,8 +19,8 @@ CARD_TYPE_GAMECARD = 1
 #card execution order: any turn; 
 class GameCard(Card):
 	#args: self, (str)name of card, (str)description of card, (int)execution type of card, (list of 2 int) execution dice roll
-	def __init__(self, l_sname, l_sdesc, l_iGCType, l_lDiceRoll, l_bHarborExpansion, l_iMaxAmount, l_iPrice, l_sShortDesc):
-		super(GameCard, self).__init__(l_sname, l_sdesc, CARD_TYPE_GAMECARD, l_bHarborExpansion, l_iMaxAmount, l_iPrice, l_sShortDesc)
+	def __init__(self, l_sname, l_sdesc, l_iGCType, l_lDiceRoll, l_bHarborExpansion, l_iMaxAmount, l_iPrice, l_sShortDesc, l_iID):
+		super(GameCard, self).__init__(l_sname, l_sdesc, CARD_TYPE_GAMECARD, l_bHarborExpansion, l_iMaxAmount, l_iPrice, l_sShortDesc, l_iID)
 		printd("Creating GameCard() ->  %s" % (l_sname))
 		self.m_lDiceRoll = l_lDiceRoll
 		self.m_iGCType = l_iGCType
@@ -45,8 +45,8 @@ class GameCard(Card):
 
 
 class GCPrimary(GameCard):
-	def __init__(self, l_sname, l_sdesc, l_idiceRoll, l_iIncome, l_bHarborExpansion, l_iPrice, l_sShortDesc):
-		super(GCPrimary, self).__init__(l_sname, l_sdesc, GAMECARD_ID_PRIMARY, l_idiceRoll, l_bHarborExpansion, 6, l_iPrice, l_sShortDesc)
+	def __init__(self, l_sname, l_sdesc, l_idiceRoll, l_iIncome, l_bHarborExpansion, l_iPrice, l_sShortDesc, l_iID):
+		super(GCPrimary, self).__init__(l_sname, l_sdesc, GAMECARD_ID_PRIMARY, l_idiceRoll, l_bHarborExpansion, 6, l_iPrice, l_sShortDesc, l_iID)
 		printd("Creating GCPrimary() ->  %s" % (l_sname))
 		self.m_iIncome = l_iIncome
 
@@ -57,7 +57,7 @@ class GCPrimary(GameCard):
 	def cardAction(self, plr, card):
 		
 		printd("call to GCPrimary::cardaction()")
-		for o in plr.m_lCards[GAMECARD_ID_PRIMARY]:
+		for o in plr.m_lGamecards[GAMECARD_ID_PRIMARY]:
 			if(type(o) == type(card) ):
 				plr.m_iCoins += o.m_iAmount * card.m_iIncome
 				printe("Player %s recieves %d coin(s) for %d %s(s)! (Total: %d)" % (plr.m_sName, o.m_iAmount * card.m_iIncome, o.m_iAmount, card.m_sName, plr.m_iCoins), MEVENT_ADD_COINS)
@@ -65,8 +65,8 @@ class GCPrimary(GameCard):
 		printd("%s doesnt have %s(s)! Why did you even called this function, if it's not going to do anything, you stu..." % (plr.m_sName, card.m_sName))
 
 class GCSecondary(GameCard):
-	def __init__(self, l_sname, l_sdesc, l_idiceRoll, l_iIncome, l_bHarborExpansion, l_bShopAffected, l_iPrice, l_sShortDesc):
-		super(GCSecondary, self).__init__(l_sname, l_sdesc, GAMECARD_ID_PRIMARY, l_idiceRoll, l_bHarborExpansion, 6, l_iPrice, l_sShortDesc)
+	def __init__(self, l_sname, l_sdesc, l_idiceRoll, l_iIncome, l_bHarborExpansion, l_bShopAffected, l_iPrice, l_sShortDesc, l_iID):
+		super(GCSecondary, self).__init__(l_sname, l_sdesc, GAMECARD_ID_PRIMARY, l_idiceRoll, l_bHarborExpansion, 6, l_iPrice, l_sShortDesc, l_iID)
 		printd("Creating GCSecondary() ->  %s" % (l_sname))
 		self.m_iIncome = l_iIncome
 		#if shopping mall landmark affects the card
@@ -78,7 +78,7 @@ class GCSecondary(GameCard):
 	
 	def cardAction(self, plr, card):		
 		printd("call to GCSecondary::cardaction()")
-		for o in plr.m_lCards[GAMECARD_ID_PRIMARY]:
+		for o in plr.m_lGamecards[GAMECARD_ID_PRIMARY]:
 			if(type(o) == type(card)):
 				if(plr.m_lLandmanrs[3] and card.m_bShopAffected):
 					plr.m_iCoins += o.m_iAmount * (card.m_iIncome+1)
diff --git a/clandmarks.py b/clandmarks.py
index 1fb6023..777ce7f 100644
--- a/clandmarks.py
+++ b/clandmarks.py
@@ -14,10 +14,9 @@ LANDMARK_ID_AIRPORT = 6
 
 #base landmark class
 class CLandmark(Card):
-	def __init__(self, l_sname, l_sdesc, l_bHarborExpansion, l_iPrice, l_iID, l_sShortDesc):
+	def __init__(self, l_sname, l_sdesc, l_bHarborExpansion, l_iPrice, l_sShortDesc, l_iID):
 		#idk how to use max limit of 5 cards, player discards 2nd same landmark anyway.
-		super().__init__(l_sname, l_sdesc, CARD_TYPE_LANDMARK, l_bHarborExpansion, 5, l_iPrice, l_sShortDesc)
-		self.m_iID = l_iID
+		super().__init__(l_sname, l_sdesc, CARD_TYPE_LANDMARK, l_bHarborExpansion, 5, l_iPrice, l_sShortDesc, l_iID)
 		printd("Creating CLandmark() ->  %s" % (l_sname))
 
 	def __str__(self):
@@ -30,35 +29,35 @@ class CLandmark(Card):
 class CCityHall(CLandmark):
 	def __init__(self):
 		super().__init__("City Hall", "Immediately before buying establishments, if you have 0 coins, get 1 from the bank.", 
-			True, 0, LANDMARK_ID_CITYHALL, "Before buying, you always have 1 coin") #costs nothing built immediately
+			True, 0, "Before buying, you always have 1 coin", LANDMARK_ID_CITYHALL) #costs nothing built immediately
 
 class CHarbor(CLandmark):
 	def __init__(self):
 		super().__init__("Harbor", "If the dice total is 10 or more, you may add 2 to the total, on your turn only.",
-			True, 2, LANDMARK_ID_HARBOR, "If dice val is 10+, you may make it 12(your turn) ")
+			True, 2, "If dice val is 10+, you may make it 12(your turn) ", LANDMARK_ID_HARBOR)
 
 class CTrainStation(CLandmark):
 	def __init__(self):
 		super().__init__("Train Station", "You may roll 1 or 2 dice.", 
-			False, 4, LANDMARK_ID_TRAINSTATION, "You may roll 2 dice")
+			False, 4, "You may roll 2 dice", LANDMARK_ID_TRAINSTATION)
 
 #TODO: Add proper description to this card.
 class CShoppingMall(CLandmark):
 	def __init__(self):
 		super().__init__("Shopping Mall", "Recieve 1 more coin for your restaurants and <secondary>)",
-			False, 10, LANDMARK_ID_SHOPPINGMALL, "+1c for restaurants and <secondary> pay")
+			False, 10, "+1c for restaurants and <secondary> pay", LANDMARK_ID_SHOPPINGMALL)
 
 class CAmusementPark(CLandmark):
 	def __init__(self):
 		super().__init__("Amusement Park", "If you roll doubles, take another turn after this one.",
-			False, 16, LANDMARK_ID_AMUSEMENTPARK, "+1 your turn if you roll doubles")
+			False, 16, "take another turn if you roll doubles", LANDMARK_ID_AMUSEMENTPARK)
 
 class CRadioTower(CLandmark):
 	def __init__(self):
 		super().__init__("Radio Tower", "Once every turn, you can choose to re-roll your die/dice.",
-			False, 22, LANDMARK_ID_RADIOTOWER, "you may re-roll your die/dice once")
+			False, 22, "you may re-roll your die/dice once", LANDMARK_ID_RADIOTOWER)
 
 class CAirport(CLandmark):
 	def __init__(self):
 		super().__init__("Airport", "If you build nothing on your turn, you get 10 coins from the bank.",
-			True, 30, LANDMARK_ID_AIRPORT, "+10c if you don't build in this turn")
+			True, 30, "+10c if you don't build in this turn", LANDMARK_ID_AIRPORT)
diff --git a/cwheat.py b/cwheat.py
deleted file mode 100644
index e5d953f..0000000
--- a/cwheat.py
+++ /dev/null
@@ -1,18 +0,0 @@
-#i guess bad pracice
-from card import *
-from cgamecard import *
-
-
-#wheat field
-#1 coin at any turn
-#6 supply, 5 in starter deck
-class CWheatField(GCPrimary):
-
-	def __init__(self):
-		#Card.__init__(self, "Wheat Field", "Receive 1 coin from the bank. At any turn", CARD_TYPE_ANY_TURN, 1)
-		super(CWheatField, self).__init__("Wheat Field", "Recieve 1 coin from the bank",
-			[1,1], 1, False, 1, "+1 coin")
-
-		
-	def cardAction(self, plr):
-		super().cardAction(plr, self)
diff --git a/debugprint.py b/debugprint.py
index efd3295..e994574 100644
--- a/debugprint.py
+++ b/debugprint.py
@@ -1,6 +1,7 @@
 #contains code for debug printing and flag
+import inspect
 
-_DEBUG = True
+_DEBUG = False
 def printd(s):
     if(_DEBUG):
-        print("DEBUG::" + s)
+        print("DEBUG::%s() -> %s" % (inspect.stack()[1].function, s))
diff --git a/eventprint.py b/eventprint.py
index 76ca1ea..2583665 100644
--- a/eventprint.py
+++ b/eventprint.py
@@ -3,17 +3,17 @@
 #MEvent - machi-koro event
 MEVENT_NONE = -1 #''
 MEVENT_GENERAL = 0 #'    '
-MEVENT_LANDMARK_DESC = 1 # 'LD  '
+MEVENT_CARD_DESC = 1 # 'CD  '
 MEVENT_GAMECARD_DESC = 2 # 'GD  '
-MEVENT_CARD_DESC = 3 # 'CD  '
+MEVENT_LANDMARK_DESC = 3 # 'LD  '
 MEVENT_ADD_CARD = 4 # '+C  '
 MEVENT_REMOVE_CARD = 5 # '-C  '
 MEVENT_ADD_COINS = 6 # '++  '
 MEVENT_REMOVE_COINS = 7 # '--  ' 	;pay, to player or to bank
 MEVENT_ADD_PLAYER = 8 # '+P  '
-MEVENT_LANDMARK = 9 # 'L   '
+MEVENT_CARD = 9 # 'C   ''
 MEVENT_GAMECARD = 10 # 'G   '
-MEVENT_CARD = 11 # 'C   '
+MEVENT_LANDMARK = 11 # 'L   '
 MEVENT_ERROR = 12 # '!! ';    error of a PLAYER, not program
 
 #event printing
diff --git a/main.py b/main.py
index ee8bb70..139ed39 100644
--- a/main.py
+++ b/main.py
@@ -33,6 +33,6 @@ card.cardAction(plr)
 print('\n')
 
 #print(plr.hasCard(getLandmarkDeck()[0]))
-plr.listCards(22)
+plr.listCards(6)
 print('-----------------')
-#listDeck(None, 30)
\ No newline at end of file
+#listDeck(None, '40')
\ No newline at end of file
diff --git a/player.py b/player.py
index f96d7ae..f985397 100644
--- a/player.py
+++ b/player.py
@@ -2,22 +2,36 @@
 
 #i guess bad pracice
 from card import *
-from cwheat import *
+from cgclist import *
 from clandmarks import *
 from eventprint import *
 
 #internal use only: player count
 _PLAYER_COUNT = 0
 #internal use only: deck of all cards in the game
-_CARD_DECK = [CWheatField()]
+_GAMECARD_DECK = [CWheatField()]
 _LANDMARK_DECK = [CCityHall(), CHarbor(), CTrainStation(), CShoppingMall(), CAmusementPark(), CRadioTower(), CAirport()]
 
 def getLandmarkDeck():
 	return _LANDMARK_DECK
 
 def getGamecardDeck():
-	return _LANDMARK_DECK
+	return _GAMECARD_DECK
 
+def isCardInList(itm, lst):
+	#check if list a multidimensional list
+	#or whatever, list with lists
+	if(len(lst)):
+		if(isinstance(lst[0], list)):
+			for o in lst:
+				for i in o:
+					if i.m_iType == itm.m_iType and i.m_iID == itm.m_iID:
+						return True
+		else:
+			for o in lst:
+				if o.m_iType == itm.m_iType and o.m_iID == itm.m_iID:
+						return True
+	return False
 
 
 #class itself
@@ -29,8 +43,9 @@ class Player:
 		_PLAYER_COUNT +=1
 		printe("Player %s has entered the game! (Total: %d players)" % (self.m_sName, _PLAYER_COUNT), MEVENT_ADD_PLAYER)
 		#list lists, each sublist indicates GameCard type, such as GCARD_PRIMARY, ~SECONDARY, etc
+		#order is same as gamecard Type id
 		#each sublist contains already built cards
-		self.m_lCards = [ [], [], [], [] ]
+		self.m_lGamecards = [ [], [], [], [] ]
 		self.m_iCoins = 3
 		#list of landmark objs, landmarks that player have built, as follows(price ascending):
 		#City Hall, Harbor, Train Station, Shopping Mall, Amusement Park, Radio Tower, Airport
@@ -52,18 +67,18 @@ class Player:
 		if(card.m_iType == CARD_TYPE_LANDMARK):
 			printd("Instance of landmark")
 			#TODO: change from 'type() ==' to landmark.id check in m_lLandmarks
-			for o in self.m_lLandmarks:
-				if(o.m_iID == card.m_iID):
-					printe("You cannot build more than 1 same landmark!", MEVENT_ERROR)
-					return
+			if(isCardInList(card, self.m_lLandmarks)):
+				printe("You cannot build more than 1 same landmark!", MEVENT_ERROR)
+				return
+			
 			if(bDontCreate):
 				self.m_lLandmarks.append(card)
 			else:
 				self.m_lLandmarks.append(card.__class__())
 		elif(card.m_iType == CARD_TYPE_GAMECARD):
-			printd("Instance of gamecard" + card.typeToStr())
+			printd("Instance of gamecard: " + card.typeToStr())
 			#check if card is major, same outcome as landmarks
-			for o in self.m_lCards[card.m_iGCType]:
+			for o in self.m_lGamecards[card.m_iGCType]:
 				if(type(o) is type(card)): #match!
 					printd("Found same card in card list")
 					if(card.m_iGCType == GAMECARD_ID_MAJOR):#what if major?
@@ -76,9 +91,9 @@ class Player:
 			#add it quickly!
 			printd("Card didn't exist in the list; adding...")
 			if(bDontCreate):
-				self.m_lCards[card.m_iGCType].append(card)
+				self.m_lGamecards[card.m_iGCType].append(card)
 			else:
-				self.m_lCards[card.m_iGCType].append(card.__class__())
+				self.m_lGamecards[card.m_iGCType].append(card.__class__())
 
 
 	#lists cards of a player with optional filter applied
@@ -86,142 +101,143 @@ class Player:
 	#0 -- all, 10 -- all landmarks, 11 -- unbuilt landmarks, 12 -- built landmarks, 
 	# 20 -- all built gamecards(+status built/unbuilt), 21 -- unbuilt gamecards, 22 -- built gamecards
 	# 30/31/32 -- restaurants, 40/41/42 -- primary, 50/51/52 -- secondary, 60/61/62 -- major
-	def listCards(self, iType = 0):
+	def listCards(self, iType:str = '00'):
 		iType = str(iType)
-		if(len(iType) == 2 and iType[1] == '1'):
-			printe("Player %s's unbuilt cards: " %(self.m_sName))
-		else:
-			printe("Player %s's cards: " %(self.m_sName))
 		listDeck(self, iType)
 		pass
 	
 	def hasCard(self, card:Card):
-		for i in self.m_lCards:
-			for o in i:
-				if(type(card) is type(o)):
-					return True
-		for o in self.m_lLandmarks:
-			if(type(card) is type(o)):
-				return True
-		return False
+		result = 0
+		result += isCardInList(card, self.m_lGamecards)
+		result += isCardInList(card, self.m_lLandmarks)
+		#playing with bool conversion. 0 is false and anything else is True
+		return result
 	
 
+#do not call, internal usage only!
+#args: filter type, list to output, list to use as Filter data(optional)
+#iFilterType: 
+#0 -- just print the cards if 2nd list given, mark if does(n't) exist
+#1 -- cards NOT in the 2nd list
+#2 -- cards IN the 2nd list
+def _listDeck(iFilterType:str, lst, lst2 = None):
+	if(len(lst) == 0):
+		printe(" 0: None", MEVENT_CARD)
+		return False 
+	tmp = []
+	if(iFilterType[0] == '1'): #only unbuilt cards
+		for i in lst:#slow af
+			if(not isCardInList(i, lst2)):
+				printd('Card %s is not in the list' % (i.m_sName))
+				tmp.append(i)
+		printd("List: ")
+		for i in tmp:#slow af
+			printd(i.m_sName)
+		_listDeck('0', tmp)
+	elif(iFilterType[0] == '2'): #only built cards
+		for i in lst:#slow af
+			for j in lst2:
+				if(type(i) is type(j)):
+					tmp.append(i)
+		_listDeck('0', tmp)
+	#TODO: Remove iteration by index
+	#TODO: Add ID to gamecards
+	elif(iFilterType[0] == '0'):
+		for i in range(len(lst)):
+			if(lst[i].m_iType == CARD_TYPE_GAMECARD):
+				printe("%2d:%s %s;%sActivation:%2d-%d,%sCost:%2d, Type:%s, Description: %s" % 
+					(i+1, 
+					('' if (lst2 is None) else " (built)  " if (isCardInList(lst[i], lst2)) else " (unbuilt)"),
+					lst[i].m_sName, ' '*(27-len(lst[i].m_sName)), lst[i].m_lDiceRoll[0], lst[i].m_lDiceRoll[1],
+					#now THIS is a kludge. convert number to a string and then calculate it's length
+					" "*len(str(lst[i].m_lDiceRoll[1])), 
+					lst[i].m_iPrice, lst[i].typeToStr(), lst[i].m_sShortDesc), MEVENT_GAMECARD)
+			elif(lst[i].m_iType == CARD_TYPE_LANDMARK):
+				printe("%2d:%s %s;%sCost:%2d, Description: %s" % 
+					(lst[i].m_iID+1, 
+					('' if (lst2 is None) else " (built)  " if (isCardInList(lst[i], lst2)) else " (unbuilt)"),
+					lst[i].m_sName, ' '*(16-len(lst[i].m_sName)), lst[i].m_iPrice, lst[i].m_sShortDesc), MEVENT_LANDMARK)
+		
+	else:
+		return False #fail, type didn't match
+	return True #success!
+
 #args: optional Player type, 
 #list deck with possible filters to player
-#0 -- all, 10 -- all landmarks, 11 -- unbuilt landmarks, 12 -- built landmarks, 
+# 00 -- all, 01 -- all unbuilt cards, 02 -- all built cards
+# 10 -- all landmarks, 11 -- unbuilt landmarks, 12 -- built landmarks, 
 # 20 -- all built gamecards(+status built/unbuilt), 21 -- unbuilt gamecards, 22 -- built gamecards
 # 30/31/32 -- restaurants, 40/41/42 -- primary, 50/51/52 -- secondary, 60/61/62 -- major
 #TODO: print error if iType is wrong
-def listDeck(plr:Player = None, iType = 0):
+#TODO: move for-loop print to different function(avoid giant copy-paste)
+def listDeck(plr:Player = None, iType:str = '00'):
 	#if plr is None -- check only iType of 10, 20, 30, 40, 50, 60; use global deck
-	iType = str(iType)
-	printd("entered listdeck")
 	printd("iType = %s" % (iType))
+	
+	lst = None
+	lst2 = None
+	prtStr = ""
+	if(len(iType) > 2 or len(iType) == 0):
+		printd("iType has completely wrong length! Failed to listdeck")
+		return False
+	elif(len(iType) == 1):
+		printd("iType's length is 1. Assuming '0' for 2nd char...")
+		iType += '0'
+	
 	if(plr is None):
 		printd("plr is none, not passed probably")
-		#TODO:Make a cool-looking table
-		if(iType[0] == '0'):
-			listDeck(None, 10)
-			listDeck(None, 20)
-		elif(iType == '10'):
-			printe("Landmarks:", MEVENT_GENERAL)
-			for i in range(len(_LANDMARK_DECK)):
-				#same kludge here
-				#16 - length
-				printe("%2d: %s;%sCost:%2d, Description: %s" % 
-						(i+1, _LANDMARK_DECK[i].m_sName, ' '*(16-len(_LANDMARK_DECK[i].m_sName)), _LANDMARK_DECK[i].m_iPrice, _LANDMARK_DECK[i].m_sShortDesc), MEVENT_LANDMARK)
-		elif(iType == '20'):
-			printe("Establishments:", MEVENT_GENERAL)
-			for i in range(len(_CARD_DECK)):
-				#kludge for padding
-				#card name + 27-length
-				printe("%2d: %s;%sActivation:%2d-%d,%sCost:%2d, Type:%s, Description: %s" % 
-						(i+1, _CARD_DECK[i].m_sName, ' '*(27-len(_CARD_DECK[i].m_sName)), _CARD_DECK[i].m_lDiceRoll[0], _CARD_DECK[i].m_lDiceRoll[1],
-						#now THIS is a kludge. convert number to a string and then calculate it's length
-						" "*len(str(_CARD_DECK[i].m_lDiceRoll[1])), 
-						_CARD_DECK[i].m_iPrice, _CARD_DECK[i].typeToStr(), _CARD_DECK[i].m_sShortDesc), MEVENT_GAMECARD)
-		#establishments
-		elif(iType == '30' or iType == '40' or iType == '50' or iType == '60'):
-			#since game card id's are from 0 to 3, we can just convert iType to int and check
-			printe(GAMECARD_NAMES[int(iType[0])-3]+"s:", MEVENT_GENERAL)
-			for i in range(len(_CARD_DECK)):
-				if(_CARD_DECK[i].m_iGCType == (int(iType[0])-3)):
-					#kludge for padding
-					#card name + 27-length
-					printe("%2d: %s;%sActivation:%2d-%d,%sCost:%2d, Type:%s, Description: %s" % 
-							(i+1, _CARD_DECK[i].m_sName, ' '*(27-len(_CARD_DECK[i].m_sName)), _CARD_DECK[i].m_lDiceRoll[0], _CARD_DECK[i].m_lDiceRoll[1],
-							#now THIS is a kludge. convert number to a string and then calculate it's length
-							" "*len(str(_CARD_DECK[i].m_lDiceRoll[1])), 
-							_CARD_DECK[i].m_iPrice, _CARD_DECK[i].typeToStr(), _CARD_DECK[i].m_sShortDesc), MEVENT_GAMECARD)
-	else: #else, now play with filtering
+	else:
 		printd("plr is not None, player is passed! Checking cards...")
-		
-		#good ol' elif tower
-		if(iType[0] == '0'): #all cards
-			listDeck(plr, "10")
-			listDeck(plr, "20")
-		elif(iType[0] == '1'): #landmarks
-			if(iType[1] == '0'): #all cards
-				printe("Landmarks:", MEVENT_GENERAL)
-				for i in range(len(_LANDMARK_DECK)):
-					#same kludge here
-					#16 - length
-					printe("%2d: %sbuilt) %s;%sCost:%2d, Description: %s" % 
-							(i+1, '  (' if(plr.hasCard(_LANDMARK_DECK[i])) else '(un',_LANDMARK_DECK[i].m_sName, ' '*(16-len(_LANDMARK_DECK[i].m_sName)), _LANDMARK_DECK[i].m_iPrice, _LANDMARK_DECK[i].m_sShortDesc), MEVENT_LANDMARK)
-			elif(iType[1] == '1'): #unbuilt cards
-				printe("Unbuilt Landmarks:", MEVENT_GENERAL)
-				for i in range(len(_LANDMARK_DECK)):
-					if(not plr.hasCard(_LANDMARK_DECK[i])):
-						#same kludge here
-						#16 - length
-						printe("%2d: %s;%sCost:%2d, Description: %s" % 
-								(i+1, _LANDMARK_DECK[i].m_sName, ' '*(16-len(_LANDMARK_DECK[i].m_sName)), _LANDMARK_DECK[i].m_iPrice, _LANDMARK_DECK[i].m_sShortDesc), MEVENT_LANDMARK)
-					elif(i == (len(_LANDMARK_DECK) -1)):
-						printe(" 0: None", MEVENT_LANDMARK)
-			elif(iType[1] == '2'): #built cards
-				printe("Built Landmarks:", MEVENT_GENERAL)
-				for i in range(len(plr.m_lLandmarks)):
-					#same kludge here
-					#16 - length
-					printe("%2d: %s;%sCost:%2d, Description: %s" % 
-							(i+1, plr.m_lLandmarks[i].m_sName, ' '*(16-len(plr.m_lLandmarks[i].m_sName)), plr.m_lLandmarks[i].m_iPrice, plr.m_lLandmarks[i].m_sShortDesc), MEVENT_LANDMARK)
-		elif(iType[0] == '2'): #all gamecards
-			if(iType[1] == '0'): #all cards
-				printe("Establisments:", MEVENT_GENERAL)
-				for i in range(len(_CARD_DECK)):
-					#kludge for padding
-					#card name + 27-length
-					printe("%2d: %sbuilt) %s;%sActivation:%2d-%d,%sCost:%2d, Type:%s, Description: %s" % 
-							(i+1,'  (' if(plr.hasCard(_CARD_DECK[i])) else '(un', _CARD_DECK[i].m_sName, ' '*(27-len(_CARD_DECK[i].m_sName)), _CARD_DECK[i].m_lDiceRoll[0], _CARD_DECK[i].m_lDiceRoll[1],
-							#now THIS is a kludge. convert number to a string and then calculate it's length
-							" "*(3-len(str(_CARD_DECK[i].m_lDiceRoll[1]))), 
-							_CARD_DECK[i].m_iPrice, _CARD_DECK[i].typeToStr(), _CARD_DECK[i].m_sShortDesc), MEVENT_GAMECARD)
-			elif(iType[1] == '1'): #unbuilt cards
-				printe("Unbuilt Establisments:", MEVENT_GENERAL)
-				for i in range(len(_CARD_DECK)):
-					#kludge for padding
-					#card name + 27-length
-					if(not plr.hasCard(_CARD_DECK[i])):
-						printe("%2d: %s;%sActivation:%2d-%d,%sCost:%2d, Type:%s, Description: %s" % 
-								(i+1, _CARD_DECK[i].m_sName, ' '*(27-len(_CARD_DECK[i].m_sName)), _CARD_DECK[i].m_lDiceRoll[0], _CARD_DECK[i].m_lDiceRoll[1],
-								#now THIS is a kludge. convert number to a string and then calculate it's length
-								" "*len(str(_CARD_DECK[i].m_lDiceRoll[1])), 
-								_CARD_DECK[i].m_iPrice, _CARD_DECK[i].typeToStr(), _CARD_DECK[i].m_sShortDesc), MEVENT_GAMECARD)
-					elif(i == (len(_CARD_DECK) -1)):
-						printe(" 0: None", MEVENT_GAMECARD)
-			elif(iType[1] == '2'):
-				printe("Built Establisments:", MEVENT_GENERAL)
-				for o in range(len(plr.m_lCards)):
-					printe("	" + GAMECARD_NAMES[o]+"s:")
-					if(len(plr.m_lCards[o]) == 0):
-						printe(" 0: None", MEVENT_GAMECARD)
-						continue
-					for i in range(len(plr.m_lCards[o])):
-						printe("%2d: %s;%sActivation:%2d-%d,%sCost:%2d, Type:%s, Description: %s" % 
-								(i+1, plr.m_lCards[o][i].m_sName, ' '*(27-len(plr.m_lCards[o][i].m_sName)), plr.m_lCards[o][i].m_lDiceRoll[0], plr.m_lCards[o][i].m_lDiceRoll[1],
-								#now THIS is a kludge. convert number to a string and then calculate it's length
-								" "*len(str(plr.m_lCards[o][i].m_lDiceRoll[1])), 
-								plr.m_lCards[o][i].m_iPrice, plr.m_lCards[o][i].typeToStr(), plr.m_lCards[o][i].m_sShortDesc), MEVENT_GAMECARD)
-					
+		if(iType[1] == '1'):
+			printe("Player %s's unbuilt cards: " %(plr.m_sName))
+		else:
+			printe("Player %s's cards: " %(plr.m_sName))
+	
+	if(iType[0] == '0'):
+		printd("iType[0] is 0; Calling recursively with specifier '1' and '2'")
+		listDeck(plr, '1' + iType[1])
+		listDeck(plr, '2' + iType[1])
+		return True
+	elif(iType[0] == '1'):
+		printd("iType[0] is 1; Landmarks...")
+		prtStr = "%s Landmarks"
+		lst = _LANDMARK_DECK
+		if(plr is not None):
+			lst2 = plr.m_lLandmarks
+	elif(iType[0] == '2'):
+		printd("iType[0] is 2; Establishments...")
+		prtStr = "%s Establishments"
+		lst = _GAMECARD_DECK
+		if(plr is not None):
+			lst2 = plr.m_lGamecards
+	elif(2 < int(iType[0]) < 7):
+		printd("iType[0] is %s; %ss..." % (iType[0], GAMECARD_NAMES[int(iType[0])-3]))
+		lst = []
+		for o in _GAMECARD_DECK:
+			if o.m_iGCType == int(iType[0])-3:
+				lst.append(o)
+		prtStr = "%%s %ss" % (GAMECARD_NAMES[int(iType[0])-3])
+		if(plr is not None):
+			lst2 = plr.m_lGamecards[int(iType[0])-3]
+	else:
+		printd("iType[0] value didn't match predefined list! Failed to listdeck")
+		return #nothing to do
+	
+	if(iType[1] == '0'):
+		printd('iType[1] is 0;Listing everything!')
+		printe('	' + prtStr % ("All"))
+		_listDeck(iType[1], lst, lst2)
+	elif(iType[1] == '1'):
+		printd('iType[1] is 1;Listing unbuilt!')
+		printe('	' + prtStr % ("Unbuilt"))
+		_listDeck(iType[1], lst, lst2)
+	elif(iType[1] == '2'):
+		printd('iType[1] is 2;Listing built!')
+		printe('	' + prtStr % ("Built"))
+		_listDeck(iType[1], lst, lst2)
+	else:
+		printd("iType[1] value didn't match predefined list! Failed to listdeck")
+		return #nothing to do
+	return True
+
 
-			
diff --git a/test.py b/test.py
index 8ad62bd..a0c9e08 100644
--- a/test.py
+++ b/test.py
@@ -1,6 +1,13 @@
 import os
+from typing import List
 w = os.get_terminal_size()
-print("Hello world!")
-print("\033[%d;%dH" % (0, 0))
-print("Bye")
-print(w)
\ No newline at end of file
+#print("Hello world!")
+#print("\033[%d;%dH" % (0, 0))
+#print("Bye")
+#print(w)
+
+a = False
+b = False
+print(a)
+print(b)
+print( 1 if a else 2 if b else 3 )
\ No newline at end of file
